// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/specification.jflex

package matthew.yelkin.com.halsteadmetrics.jflex;

import java.util.LinkedList;


@SuppressWarnings("fallthrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\41\u1f00"+
    "\1\u0100\1\u2e00\1\u2f00\1\u0100\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u5000\3\u0100"+
    "\1\u5100\1\u5200\1\u5300\11\u1f00\1\u5400\4\u0100\1\u5500\17\u1f00"+
    "\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00\1\u5900"+
    "\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\41\u1f00\1\u5e00"+
    "\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\22\u1f00\1\u6200\1\u1f00"+
    "\1\u6300\1\u6400\1\u1f00\1\u6500\1\u6600\1\u6700\1\u6800\2\u1f00"+
    "\1\u6900\4\u1f00\1\u6a00\1\u6b00\1\u6c00\1\u6d00\1\u1f00\1\u6e00"+
    "\2\u1f00\1\u6f00\1\u7000\1\u7100\2\u1f00\1\u7200\1\u1f00\1\u7300"+
    "\14\u1f00\1\u7400\4\u1f00\246\u0100\1\u7500\20\u0100\1\u7600\1\u7700"+
    "\25\u0100\1\u7800\34\u0100\1\u7900\14\u1f00\2\u0100\1\u7a00\5\u1f00"+
    "\23\u0100\1\u7b00\17\u0100\1\u7c00\u0adc\u1f00\1\u7d00\1\u7e00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\5\1\6\1\7\1\3\1\10\1\11\1\12\1\3"+
    "\1\13\1\14\1\15\1\11\1\16\1\17\1\20\1\21"+
    "\1\22\11\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\3\1\10\1\32\1\33\1\34\1\10\1\35\2\10"+
    "\1\36\11\10\1\37\7\10\1\40\1\3\1\41\1\42"+
    "\1\10\1\3\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\10\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\10\1\73\1\74\1\75\1\42"+
    "\41\0\2\3\4\10\4\3\1\10\2\3\1\0\7\3"+
    "\1\10\4\3\1\10\5\3\27\10\1\3\37\10\1\3"+
    "\u01ca\10\4\3\14\10\16\3\5\10\7\3\1\10\1\3"+
    "\1\10\21\3\160\0\5\10\1\3\2\10\2\3\4\10"+
    "\1\3\1\10\6\3\1\10\1\3\3\10\1\3\1\10"+
    "\1\3\24\10\1\3\123\10\1\3\213\10\1\3\5\0"+
    "\2\3\246\10\1\3\46\10\2\3\1\10\6\3\51\10"+
    "\6\3\1\10\1\3\55\0\1\3\1\0\1\3\2\0"+
    "\1\3\2\0\1\3\1\0\10\3\33\10\4\3\4\10"+
    "\15\3\6\0\5\3\1\10\4\3\13\0\1\3\1\0"+
    "\3\3\53\10\37\0\4\3\2\10\1\0\143\10\1\3"+
    "\1\10\10\0\1\3\6\0\2\10\2\0\1\3\4\0"+
    "\2\10\12\0\3\10\2\3\1\10\17\3\1\0\1\10"+
    "\1\0\36\10\33\0\2\3\131\10\13\0\1\10\16\3"+
    "\12\0\41\10\11\0\2\10\4\3\1\10\2\3\1\0"+
    "\30\10\4\0\1\10\11\0\1\10\3\0\1\10\5\0"+
    "\22\3\31\10\3\0\4\3\13\10\5\3\30\10\1\3"+
    "\6\10\1\3\2\0\6\3\10\0\52\10\72\0\66\10"+
    "\3\0\1\10\22\0\1\10\7\0\12\10\2\0\2\3"+
    "\12\0\1\3\20\10\3\0\1\3\10\10\2\3\2\10"+
    "\2\3\26\10\1\3\7\10\1\3\1\10\3\3\4\10"+
    "\2\3\1\0\1\10\7\0\2\3\2\0\2\3\3\0"+
    "\1\10\10\3\1\0\4\3\2\10\1\3\3\10\2\0"+
    "\2\3\12\0\4\10\7\3\2\10\1\3\1\0\2\3"+
    "\3\0\1\3\6\10\4\3\2\10\2\3\26\10\1\3"+
    "\7\10\1\3\2\10\1\3\2\10\1\3\2\10\2\3"+
    "\1\0\1\3\5\0\4\3\2\0\2\3\3\0\3\3"+
    "\1\0\7\3\4\10\1\3\1\10\7\3\14\0\3\10"+
    "\1\0\13\3\3\0\1\3\11\10\1\3\3\10\1\3"+
    "\26\10\1\3\7\10\1\3\2\10\1\3\5\10\2\3"+
    "\1\0\1\10\10\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\10\17\3\2\10\2\0\2\3\12\0\1\3\1\10"+
    "\7\3\1\10\6\0\1\3\3\0\1\3\10\10\2\3"+
    "\2\10\2\3\26\10\1\3\7\10\1\3\2\10\1\3"+
    "\5\10\2\3\1\0\1\10\7\0\2\3\2\0\2\3"+
    "\3\0\7\3\3\0\4\3\2\10\1\3\3\10\2\0"+
    "\2\3\12\0\1\3\1\10\20\3\1\0\1\10\1\3"+
    "\6\10\3\3\3\10\1\3\4\10\3\3\2\10\1\3"+
    "\1\10\1\3\2\10\3\3\2\10\3\3\3\10\3\3"+
    "\14\10\4\3\5\0\3\3\3\0\1\3\4\0\2\3"+
    "\1\10\6\3\1\0\16\3\12\0\11\3\1\10\6\3"+
    "\5\0\10\10\1\3\3\10\1\3\27\10\1\3\20\10"+
    "\2\3\1\0\1\10\7\0\1\3\3\0\1\3\4\0"+
    "\7\3\2\0\1\3\3\10\2\3\1\10\2\3\2\10"+
    "\2\0\2\3\12\0\20\3\1\10\3\0\1\3\10\10"+
    "\1\3\3\10\1\3\27\10\1\3\12\10\1\3\5\10"+
    "\2\3\1\0\1\10\7\0\1\3\3\0\1\3\4\0"+
    "\7\3\2\0\6\3\2\10\1\3\2\10\2\0\2\3"+
    "\12\0\1\3\2\10\1\0\14\3\4\0\11\10\1\3"+
    "\3\10\1\3\51\10\2\0\1\10\7\0\1\3\3\0"+
    "\1\3\4\0\1\10\5\3\3\10\1\0\7\3\3\10"+
    "\2\0\2\3\12\0\12\3\6\10\1\3\3\0\1\3"+
    "\22\10\3\3\30\10\1\3\11\10\1\3\1\10\2\3"+
    "\7\10\3\3\1\0\4\3\6\0\1\3\1\0\1\3"+
    "\10\0\6\3\12\0\2\3\2\0\15\3\60\10\1\0"+
    "\2\10\7\0\4\3\10\10\10\0\1\3\12\0\47\3"+
    "\2\10\1\3\1\10\1\3\5\10\1\3\30\10\1\3"+
    "\1\10\1\3\12\10\1\0\2\10\11\0\1\10\2\3"+
    "\5\10\1\3\1\10\1\3\7\0\1\3\12\0\2\3"+
    "\4\10\40\3\1\10\27\3\2\0\6\3\12\0\13\3"+
    "\1\0\1\3\1\0\1\3\1\0\4\3\2\0\10\10"+
    "\1\3\44\10\4\3\24\0\1\3\2\0\5\10\13\0"+
    "\1\3\44\0\11\3\1\0\71\3\53\10\24\0\1\10"+
    "\12\0\6\3\6\10\4\0\4\10\3\0\1\10\3\0"+
    "\2\10\7\0\3\10\4\0\15\10\14\0\1\10\17\0"+
    "\2\3\46\10\1\3\1\10\5\3\1\10\2\3\53\10"+
    "\1\3\115\10\1\3\4\10\2\3\7\10\1\3\1\10"+
    "\1\3\4\10\2\3\51\10\1\3\4\10\2\3\41\10"+
    "\1\3\4\10\2\3\7\10\1\3\1\10\1\3\4\10"+
    "\2\3\17\10\1\3\71\10\1\3\4\10\2\3\103\10"+
    "\2\3\3\0\40\3\20\10\20\3\126\10\2\3\6\10"+
    "\3\3\u016c\10\2\3\21\10\1\3\32\10\5\3\113\10"+
    "\3\3\13\10\7\3\22\10\4\0\11\3\23\10\3\0"+
    "\13\3\22\10\2\0\14\3\15\10\1\3\3\10\1\3"+
    "\2\0\14\3\64\10\40\0\3\3\1\10\3\3\2\10"+
    "\1\0\2\3\12\0\41\3\17\0\6\3\131\10\7\3"+
    "\5\10\2\0\42\10\1\0\1\10\5\3\106\10\12\3"+
    "\37\10\1\3\14\0\4\3\14\0\12\3\12\0\36\10"+
    "\2\3\5\10\13\3\54\10\4\3\32\10\6\3\12\0"+
    "\46\3\27\10\5\0\4\3\65\10\12\0\1\3\35\0"+
    "\2\3\13\0\6\3\12\0\15\3\1\10\10\3\16\0"+
    "\1\3\20\0\61\3\5\0\57\10\21\0\10\10\3\3"+
    "\12\0\21\3\11\0\14\3\3\0\36\10\15\0\2\10"+
    "\12\0\54\10\16\0\14\3\44\10\24\0\10\3\12\0"+
    "\3\3\3\10\12\0\44\10\2\3\11\10\7\3\53\10"+
    "\2\3\3\10\20\3\3\0\1\3\25\0\4\10\1\0"+
    "\6\10\1\0\2\10\3\0\1\10\5\3\300\10\100\0"+
    "\26\10\2\3\6\10\2\3\46\10\2\3\6\10\2\3"+
    "\10\10\1\3\1\10\1\3\1\10\1\3\1\10\1\3"+
    "\37\10\2\3\65\10\1\3\7\10\1\3\1\10\3\3"+
    "\3\10\1\3\7\10\3\3\4\10\2\3\6\10\4\3"+
    "\15\10\5\3\3\10\1\3\7\10\16\3\5\0\32\3"+
    "\5\0\20\3\2\10\23\3\1\10\13\3\5\0\1\3"+
    "\12\0\1\3\1\10\15\3\1\10\20\3\15\10\3\3"+
    "\41\10\17\3\15\0\4\3\1\0\3\3\14\0\21\3"+
    "\1\10\4\3\1\10\2\3\12\10\1\3\1\10\3\3"+
    "\5\10\6\3\1\10\1\3\1\10\1\3\1\10\1\3"+
    "\4\10\1\3\13\10\2\3\4\10\5\3\5\10\4\3"+
    "\1\10\21\3\51\10\u0177\3\345\10\6\3\4\10\3\0"+
    "\2\10\14\3\46\10\1\3\1\10\5\3\1\10\2\3"+
    "\70\10\7\3\1\10\17\3\1\0\27\10\11\3\7\10"+
    "\1\3\7\10\1\3\7\10\1\3\7\10\1\3\7\10"+
    "\1\3\7\10\1\3\7\10\1\3\7\10\1\3\40\0"+
    "\57\3\1\10\325\3\3\10\31\3\11\10\6\0\1\3"+
    "\5\10\2\3\5\10\4\3\126\10\2\3\2\0\2\3"+
    "\3\10\1\3\132\10\1\3\4\10\5\3\53\10\1\3"+
    "\136\10\21\3\40\10\60\3\320\10\100\3\215\10\103\3"+
    "\56\10\2\3\15\10\3\3\20\10\12\0\2\10\24\3"+
    "\57\10\1\0\4\3\12\0\1\3\37\10\2\0\120\10"+
    "\2\0\45\3\11\10\2\3\147\10\2\3\100\10\5\3"+
    "\2\10\1\3\1\10\1\3\5\10\30\3\20\10\1\0"+
    "\3\10\1\0\4\10\1\0\27\10\5\0\4\3\1\0"+
    "\13\3\1\10\7\3\64\10\14\3\2\0\62\10\22\0"+
    "\12\3\12\0\6\3\22\0\6\10\3\3\1\10\1\3"+
    "\2\10\13\0\34\10\10\0\2\3\27\10\15\0\14\3"+
    "\35\10\3\3\4\0\57\10\16\0\16\3\1\10\12\0"+
    "\6\3\5\10\1\0\12\10\12\0\5\10\1\3\51\10"+
    "\16\0\11\3\3\10\1\0\10\10\2\0\2\3\12\0"+
    "\6\3\27\10\3\3\1\10\3\0\62\10\1\0\1\10"+
    "\3\0\2\10\2\0\5\10\2\0\1\10\1\0\1\10"+
    "\30\3\3\10\2\3\13\10\5\0\2\3\3\10\2\0"+
    "\12\3\6\10\2\3\6\10\2\3\6\10\11\3\7\10"+
    "\1\3\7\10\1\3\53\10\1\3\16\10\6\3\163\10"+
    "\10\0\1\3\2\0\2\3\12\0\6\3\244\10\14\3"+
    "\27\10\4\3\61\10\4\3\156\10\2\3\152\10\46\3"+
    "\7\10\14\3\5\10\5\3\1\10\1\0\12\10\1\3"+
    "\15\10\1\3\5\10\1\3\1\10\1\3\2\10\1\3"+
    "\2\10\1\3\154\10\41\3\153\10\22\3\100\10\2\3"+
    "\66\10\50\3\15\10\3\3\20\0\20\3\20\0\3\3"+
    "\2\10\30\3\3\10\31\3\1\10\6\3\5\10\1\3"+
    "\207\10\2\3\1\0\4\3\1\10\13\3\12\0\7\3"+
    "\32\10\4\3\1\10\1\3\32\10\13\3\131\10\3\3"+
    "\6\10\2\3\6\10\2\3\6\10\2\3\3\10\3\3"+
    "\2\10\3\3\2\10\22\3\3\0\4\3\14\10\1\3"+
    "\32\10\1\3\23\10\1\3\2\10\1\3\17\10\2\3"+
    "\16\10\42\3\173\10\105\3\65\10\210\3\1\0\202\3"+
    "\35\10\3\3\61\10\17\3\1\0\37\3\40\10\15\3"+
    "\36\10\5\3\46\10\5\0\5\3\36\10\2\3\44\10"+
    "\4\3\10\10\1\3\5\10\52\3\236\10\2\3\12\0"+
    "\6\3\44\10\4\3\44\10\4\3\50\10\10\3\64\10"+
    "\14\3\13\10\1\3\17\10\1\3\7\10\1\3\2\10"+
    "\1\3\13\10\1\3\17\10\1\3\7\10\1\3\2\10"+
    "\103\3\67\10\11\3\26\10\12\3\10\10\30\3\6\10"+
    "\1\3\52\10\1\3\11\10\105\3\6\10\2\3\1\10"+
    "\1\3\54\10\1\3\2\10\3\3\1\10\2\3\27\10"+
    "\12\3\27\10\11\3\37\10\101\3\23\10\1\3\2\10"+
    "\12\3\26\10\12\3\32\10\106\3\70\10\6\3\2\10"+
    "\100\3\1\10\3\0\1\3\2\0\5\3\4\0\4\10"+
    "\1\3\3\10\1\3\35\10\2\3\3\0\4\3\1\0"+
    "\40\3\35\10\3\3\35\10\43\3\10\10\1\3\34\10"+
    "\2\0\31\3\66\10\12\3\26\10\12\3\23\10\15\3"+
    "\22\10\156\3\111\10\67\3\63\10\15\3\63\10\15\3"+
    "\44\10\4\0\10\3\12\0\u0146\3\52\10\1\3\2\0"+
    "\3\3\2\10\113\3\3\0\35\10\12\3\1\10\10\3"+
    "\26\10\13\0\37\3\22\10\4\0\52\3\25\10\33\3"+
    "\27\10\11\3\3\0\65\10\17\0\37\3\13\0\2\10"+
    "\2\0\1\10\11\3\4\0\55\10\13\0\2\3\1\0"+
    "\4\3\1\0\12\3\1\0\2\3\31\10\7\3\12\0"+
    "\6\3\3\0\44\10\16\0\1\3\12\0\4\3\1\10"+
    "\2\0\1\10\10\3\43\10\1\0\2\3\1\10\11\3"+
    "\3\0\60\10\16\0\4\10\4\3\4\0\1\3\14\0"+
    "\1\10\1\3\1\10\43\3\22\10\1\3\31\10\14\0"+
    "\6\3\1\0\2\10\1\0\76\3\7\10\1\3\1\10"+
    "\1\3\4\10\1\3\17\10\1\3\12\10\7\3\57\10"+
    "\14\0\5\3\12\0\6\3\4\0\1\3\10\10\2\3"+
    "\2\10\2\3\26\10\1\3\7\10\1\3\2\10\1\3"+
    "\5\10\1\3\2\0\1\10\7\0\2\3\2\0\2\3"+
    "\3\0\2\3\1\10\6\3\1\0\5\3\5\10\2\0"+
    "\2\3\7\0\3\3\5\0\213\3\65\10\22\0\4\10"+
    "\5\3\12\0\4\3\1\0\3\10\36\3\60\10\24\0"+
    "\2\10\1\3\1\10\10\3\12\0\246\3\57\10\7\0"+
    "\2\3\11\0\27\3\4\10\2\0\42\3\60\10\21\0"+
    "\3\3\1\10\13\3\12\0\46\3\53\10\15\0\1\10"+
    "\7\3\12\0\66\3\33\10\2\3\17\0\4\3\12\0"+
    "\6\3\7\10\271\3\54\10\17\0\145\3\100\10\12\0"+
    "\25\3\10\10\2\3\1\10\2\3\10\10\1\3\2\10"+
    "\1\3\30\10\6\0\1\3\2\0\2\3\4\0\1\10"+
    "\1\0\1\10\2\0\14\3\12\0\106\3\10\10\2\3"+
    "\47\10\7\0\2\3\7\0\1\10\1\3\1\10\1\0"+
    "\33\3\1\10\12\0\50\10\7\0\1\10\4\0\10\3"+
    "\1\0\10\3\1\10\13\0\56\10\20\0\3\3\1\10"+
    "\22\3\111\10\7\3\11\10\1\3\45\10\10\0\1\3"+
    "\10\0\1\10\17\3\12\0\30\3\36\10\2\3\26\0"+
    "\1\3\16\0\111\3\7\10\1\3\2\10\1\3\46\10"+
    "\6\0\3\3\1\0\1\3\2\0\1\3\7\0\1\10"+
    "\1\0\10\3\12\0\6\3\6\10\1\3\2\10\1\3"+
    "\40\10\5\0\1\3\2\0\1\3\5\0\1\10\7\3"+
    "\12\0\u0136\3\23\10\4\0\11\3\2\0\1\10\1\0"+
    "\15\10\1\3\42\10\7\0\3\3\5\0\15\3\12\0"+
    "\126\3\1\10\54\3\4\10\37\3\232\10\146\3\157\10"+
    "\21\3\304\10\u014c\3\141\10\17\3\60\10\21\0\6\10"+
    "\17\0\252\3\107\10\271\3\71\10\7\3\37\10\1\3"+
    "\12\0\6\3\117\10\1\3\12\0\6\3\36\10\2\3"+
    "\5\0\13\3\60\10\7\0\11\3\4\10\14\3\12\0"+
    "\11\3\25\10\5\3\23\10\260\3\100\10\200\3\113\10"+
    "\4\3\1\0\1\10\67\0\7\3\4\0\15\10\100\3"+
    "\2\10\1\3\1\10\1\0\13\3\2\0\16\3\370\10"+
    "\10\3\326\10\52\3\11\10\u01e7\3\4\10\1\3\7\10"+
    "\1\3\2\10\1\3\43\10\17\3\1\10\35\3\3\10"+
    "\2\3\1\10\16\3\4\10\10\3\u018c\10\4\3\153\10"+
    "\5\3\15\10\3\3\11\10\7\3\12\10\3\3\2\0"+
    "\1\3\4\0\134\3\56\0\2\3\27\0\u011e\3\5\0"+
    "\3\3\26\0\2\3\7\0\36\3\4\0\224\3\3\0"+
    "\273\3\125\10\1\3\107\10\1\3\2\10\2\3\1\10"+
    "\2\3\2\10\2\3\4\10\1\3\14\10\1\3\1\10"+
    "\1\3\7\10\1\3\101\10\1\3\4\10\2\3\10\10"+
    "\1\3\7\10\1\3\34\10\1\3\4\10\1\3\5\10"+
    "\1\3\1\10\3\3\7\10\1\3\u0154\10\2\3\31\10"+
    "\1\3\31\10\1\3\37\10\1\3\31\10\1\3\37\10"+
    "\1\3\31\10\1\3\37\10\1\3\31\10\1\3\37\10"+
    "\1\3\31\10\1\3\10\10\2\3\151\0\4\3\62\0"+
    "\10\3\1\0\16\3\1\0\26\3\5\0\1\3\17\0"+
    "\120\3\37\10\6\3\6\10\325\3\7\0\1\3\21\0"+
    "\2\3\7\0\1\3\2\0\1\3\5\0\5\3\76\10"+
    "\41\3\1\0\160\3\55\10\3\3\7\0\7\10\2\3"+
    "\12\0\4\3\1\10\u0141\3\36\10\1\0\21\3\54\10"+
    "\16\0\5\3\1\10\320\3\34\10\16\0\346\3\7\10"+
    "\1\3\4\10\1\3\2\10\1\3\17\10\1\3\305\10"+
    "\13\3\7\0\51\3\104\10\7\0\1\10\4\3\12\0"+
    "\u0156\3\1\10\117\3\4\10\1\3\33\10\1\3\2\10"+
    "\1\3\1\10\2\3\1\10\1\3\12\10\1\3\4\10"+
    "\1\3\1\10\1\3\1\10\6\3\1\10\4\3\1\10"+
    "\1\3\1\10\1\3\1\10\1\3\3\10\1\3\2\10"+
    "\1\3\1\10\2\3\1\10\1\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\1\10\1\3\2\10\1\3\1\10"+
    "\2\3\4\10\1\3\7\10\1\3\4\10\1\3\4\10"+
    "\1\3\1\10\1\3\12\10\1\3\21\10\5\3\3\10"+
    "\1\3\5\10\1\3\21\10\u0134\3\12\0\6\3\340\10"+
    "\40\3\72\10\6\3\336\10\2\3\u0182\10\16\3\u0131\10"+
    "\37\3\36\10\342\3\113\10\5\3\u0160\10\121\3\1\0"+
    "\36\3\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\5\1\12\1\5\2\13\1\14"+
    "\1\15\1\16\1\17\1\16\1\20\6\4\1\21\1\22"+
    "\1\6\20\4\1\23\1\6\1\24\1\16\1\0\1\25"+
    "\1\26\1\17\1\3\1\27\2\0\1\2\2\0\1\16"+
    "\6\4\1\30\1\31\4\4\1\32\10\4\1\33\1\4"+
    "\1\34\15\4\1\35\2\0\1\13\4\4\1\36\14\4"+
    "\1\37\5\4\1\40\14\4\1\41\1\4\1\42\2\4"+
    "\1\35\1\0\1\2\4\4\1\43\4\4\1\44\1\45"+
    "\3\4\1\46\4\4\1\47\12\4\1\50\6\4\1\51"+
    "\1\52\3\4\1\0\3\4\1\0\1\4\1\53\14\4"+
    "\1\54\1\55\1\4\1\0\1\4\1\56\1\0\3\4"+
    "\1\57\5\4\1\60\1\61\1\62\1\63\1\4\1\64"+
    "\2\4\1\65\1\66\2\4\1\0\10\4\1\67\1\70"+
    "\1\20\2\4\1\71\1\4\1\72\1\73\1\4\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\76\0\174\0\272\0\370\0\u0136\0\u0174"+
    "\0\u01b2\0\76\0\76\0\76\0\u01f0\0\u022e\0\u026c\0\u02aa"+
    "\0\u02e8\0\76\0\76\0\u0326\0\272\0\u0364\0\76\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\76\0\76\0\76"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8"+
    "\0\76\0\u08f6\0\76\0\u0934\0\370\0\76\0\76\0\76"+
    "\0\76\0\76\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u02aa\0\76"+
    "\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0136\0\u0136"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0136\0\u0cd6\0\u0d14\0\u0d52"+
    "\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0136\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4"+
    "\0\u0a2c\0\u1322\0\u1360\0\u139e\0\u13dc\0\u0136\0\u141a\0\u1458"+
    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648"+
    "\0\u1686\0\u16c4\0\u0136\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa"+
    "\0\u0136\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u0136\0\u1b20\0\u0136"+
    "\0\u1b5e\0\u1b9c\0\76\0\u1bda\0\u12a6\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u0136\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u0136"+
    "\0\u1e46\0\u1e84\0\u1ec2\0\u0136\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba"+
    "\0\u0136\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c"+
    "\0\u21aa\0\u21e8\0\u2226\0\u0136\0\u2264\0\u22a2\0\u22e0\0\u231e"+
    "\0\u235c\0\u239a\0\u0136\0\u0136\0\u23d8\0\u2416\0\u2454\0\u2492"+
    "\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\76\0\u2606\0\u2644"+
    "\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834"+
    "\0\u2872\0\u28b0\0\u0136\0\u0136\0\u28ee\0\u292c\0\u296a\0\u0136"+
    "\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a"+
    "\0\u2b98\0\u2bd6\0\u0136\0\u0136\0\u0136\0\u0136\0\u2c14\0\u0136"+
    "\0\u2c52\0\u2c90\0\u2cce\0\76\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6"+
    "\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6"+
    "\0\u0136\0\u0136\0\u2ff4\0\u3032\0\u0136\0\u3070\0\u0136\0\u0136"+
    "\0\u30ae\0\u0136";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\10\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\2\7\1\47\1\7\1\50\2\7\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\7\1\57\1\60\2\7\1\61"+
    "\1\62\1\63\100\0\1\3\122\0\1\64\46\0\7\65"+
    "\1\66\66\65\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\30\7\32\0\1\70\60\0"+
    "\1\71\112\0\1\70\1\72\65\0\1\73\72\0\1\74"+
    "\3\0\1\75\5\0\1\70\66\0\1\76\1\0\2\77"+
    "\72\0\1\76\1\0\2\21\100\0\1\40\1\100\75\0"+
    "\1\100\1\40\45\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\15\7\1\101\12\7"+
    "\3\0\1\7\7\0\1\7\2\0\1\67\6\0\2\7"+
    "\6\0\6\7\3\0\7\7\1\102\20\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\15\7\1\103\12\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\12\7"+
    "\1\104\15\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\14\7\1\105\13\7"+
    "\3\0\1\7\7\0\1\7\2\0\1\67\6\0\2\7"+
    "\6\0\6\7\3\0\22\7\1\106\5\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\21\7\1\107\1\110\5\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\20\7\1\111\7\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\1\112\11\7"+
    "\1\113\15\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\4\7\1\114\10\7"+
    "\1\115\12\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\12\7\1\116\1\7"+
    "\1\117\11\7\1\120\1\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\1\121"+
    "\7\7\1\122\4\7\1\123\2\7\1\124\2\7\1\125"+
    "\4\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\5\7\1\126\5\7\1\127"+
    "\1\130\13\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\4\7\1\131\23\7"+
    "\3\0\1\7\7\0\1\7\2\0\1\67\6\0\2\7"+
    "\6\0\6\7\3\0\16\7\1\132\11\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\20\7\1\133\2\7\1\134\4\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\23\7\1\135\4\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\4\7"+
    "\1\136\23\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\22\7\1\137\1\140"+
    "\1\7\1\141\2\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\20\7\1\142"+
    "\6\7\1\143\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\1\144\27\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\7\7\1\145\20\7\77\0\1\71\30\0"+
    "\1\100\66\0\1\146\55\0\15\147\1\150\60\147\2\75"+
    "\1\3\1\75\1\4\71\75\22\0\2\151\52\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\15\7\1\152\12\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\1\153"+
    "\27\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\23\7\1\154\4\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\15\7\1\155\12\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\22\7\1\156\5\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\20\7\1\157"+
    "\7\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\4\7\1\160\23\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\21\7\1\161\1\162\5\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\1\163\27\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\5\7\1\164"+
    "\2\7\1\165\17\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\21\7\1\166"+
    "\6\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\23\7\1\167\4\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\22\7\1\170\5\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\12\7\1\171\15\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\12\7\1\172"+
    "\15\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\20\7\1\173\7\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\15\7\1\174\12\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\14\7\1\175\13\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\16\7\1\176"+
    "\11\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\10\7\1\177\11\7\1\200"+
    "\5\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\22\7\1\201\5\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\4\7\1\202\23\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\10\7\1\203\4\7\1\204\12\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\1\7\1\205\26\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\4\7\1\206"+
    "\23\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\16\7\1\207\3\7\1\210"+
    "\5\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\1\211\17\7\1\212\7\7"+
    "\3\0\1\7\7\0\1\7\2\0\1\67\6\0\2\7"+
    "\6\0\6\7\3\0\1\7\1\213\26\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\10\7\1\214\17\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\23\7"+
    "\1\215\3\7\1\216\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\16\7\1\217"+
    "\11\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\20\7\1\220\7\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\4\7\1\221\3\7\1\222\17\7\31\0"+
    "\1\223\47\0\15\147\1\224\75\147\1\224\3\147\1\225"+
    "\54\147\1\7\7\0\1\7\2\0\1\67\6\0\2\7"+
    "\6\0\6\7\3\0\12\7\1\156\15\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\20\7\1\226\7\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\1\7"+
    "\1\227\26\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\1\105\27\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\10\7\1\230\17\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\1\231\27\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\4\7\1\232\23\7"+
    "\3\0\1\7\7\0\1\7\2\0\1\67\6\0\2\7"+
    "\6\0\6\7\3\0\2\7\1\233\25\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\21\7\1\234\6\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\1\235"+
    "\27\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\14\7\1\236\13\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\4\7\1\237\23\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\13\7\1\240\14\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\4\7\1\241"+
    "\23\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\12\7\1\242\6\7\1\215"+
    "\6\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\4\7\1\243\23\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\13\7\1\244\14\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\2\7\1\245\25\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\15\7\1\246"+
    "\12\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\22\7\1\247\5\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\4\7\1\250\23\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\14\7\1\251\13\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\24\7\1\252"+
    "\3\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\22\7\1\253\5\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\12\7\1\254\15\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\21\7\1\255\6\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\4\7\1\256"+
    "\23\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\23\7\1\257\4\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\22\7\1\260\5\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\23\7\1\261\4\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\21\7\1\262"+
    "\6\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\22\7\1\263\5\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\4\7\1\264\23\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\4\7\1\265\23\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\20\7\1\266"+
    "\7\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\12\7\1\267\15\7\3\0"+
    "\15\147\1\224\3\147\1\3\54\147\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\1\270"+
    "\27\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\12\7\1\271\15\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\14\7\1\272\13\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\11\7\1\273\16\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\7\7\1\274"+
    "\20\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\21\7\1\275\6\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\23\7\1\276\4\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\10\7\1\277\17\7\3\0\1\7\4\0\1\300\2\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\30\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\14\7\1\301\13\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\22\7\1\302\5\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\16\7\1\303\11\7\3\0\1\7\2\304\1\0\2\304"+
    "\2\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\30\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\20\7\1\305\7\7"+
    "\3\0\1\7\7\0\1\7\2\0\1\306\6\0\2\7"+
    "\6\0\6\7\3\0\30\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\20\7"+
    "\1\307\7\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\1\310\27\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\15\7\1\311\12\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\10\7\1\312\17\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\22\7\1\313"+
    "\5\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\1\314\27\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\20\7\1\315\7\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\10\7"+
    "\1\316\17\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\2\7\1\317\25\7"+
    "\3\0\1\7\7\0\1\7\2\0\1\67\6\0\2\7"+
    "\6\0\6\7\3\0\2\7\1\320\25\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\2\7\1\321\25\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\1\322"+
    "\27\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\4\7\1\323\23\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\4\7\1\324\23\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\2\7\1\325\25\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\4\7\1\156"+
    "\23\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\6\7\1\156\21\7\3\0"+
    "\1\7\2\326\1\0\2\326\2\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\30\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\12\7\1\327\15\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\22\7"+
    "\1\330\5\7\56\0\1\331\22\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\21\7"+
    "\1\332\6\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\7\7\1\333\20\7"+
    "\3\0\1\7\7\0\1\7\2\0\1\67\6\0\2\7"+
    "\6\0\6\7\3\0\20\7\1\334\7\7\4\0\2\304"+
    "\1\0\2\304\2\0\1\335\21\0\6\335\3\0\30\335"+
    "\3\0\1\7\7\0\1\7\2\0\1\67\6\0\2\7"+
    "\6\0\6\7\3\0\22\7\1\336\5\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\14\7\1\337\13\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\22\7"+
    "\1\340\5\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\2\7\1\341\25\7"+
    "\3\0\1\7\7\0\1\7\2\0\1\67\6\0\2\7"+
    "\6\0\6\7\3\0\2\7\1\251\25\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\10\7\1\342\17\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\22\7"+
    "\1\343\5\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\14\7\1\344\13\7"+
    "\3\0\1\7\7\0\1\7\2\0\1\67\6\0\2\7"+
    "\6\0\6\7\3\0\2\7\1\345\25\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\22\7\1\346\5\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\20\7"+
    "\1\347\7\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\7\7\1\350\20\7"+
    "\3\0\1\7\7\0\1\7\2\0\1\67\6\0\2\7"+
    "\6\0\6\7\3\0\12\7\1\351\15\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\22\7\1\352\5\7\4\0\2\326\1\0\2\326"+
    "\2\0\1\353\21\0\6\353\3\0\30\353\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\22\7\1\240\5\7\53\0\1\354\25\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\10\7\1\355\17\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\20\7"+
    "\1\356\7\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\10\7\1\203\17\7"+
    "\3\0\1\335\7\0\1\335\11\0\2\335\6\0\6\335"+
    "\3\0\30\335\3\0\1\7\2\357\1\0\2\357\2\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\30\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\1\360\27\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\4\7\1\251\23\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\15\7"+
    "\1\361\12\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\15\7\1\362\12\7"+
    "\3\0\1\7\7\0\1\7\2\0\1\67\6\0\2\7"+
    "\6\0\6\7\3\0\10\7\1\363\17\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\10\7\1\364\17\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\4\7"+
    "\1\365\23\7\3\0\1\353\7\0\1\353\11\0\2\353"+
    "\6\0\6\353\3\0\30\353\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\15\7"+
    "\1\366\12\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\15\7\1\367\12\7"+
    "\4\0\2\357\1\0\2\357\2\0\1\370\21\0\6\370"+
    "\3\0\30\370\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\12\7\1\251\15\7"+
    "\3\0\1\7\7\0\1\7\2\0\1\67\6\0\2\7"+
    "\6\0\6\7\3\0\12\7\1\371\15\7\3\0\1\7"+
    "\7\0\1\7\2\0\1\67\6\0\2\7\6\0\6\7"+
    "\3\0\14\7\1\372\13\7\3\0\1\7\7\0\1\7"+
    "\2\0\1\67\6\0\2\7\6\0\6\7\3\0\16\7"+
    "\1\373\11\7\3\0\1\7\7\0\1\7\2\0\1\67"+
    "\6\0\2\7\6\0\6\7\3\0\1\374\27\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\20\7\1\156\7\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\14\7\1\375\13\7\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\23\7\1\376"+
    "\4\7\3\0\1\370\7\0\1\370\11\0\2\370\6\0"+
    "\6\370\3\0\30\370\3\0\1\7\7\0\1\7\2\0"+
    "\1\67\6\0\2\7\6\0\6\7\3\0\22\7\1\377"+
    "\5\7\3\0\1\7\7\0\1\7\2\0\1\67\6\0"+
    "\2\7\6\0\6\7\3\0\21\7\1\u0100\6\7\3\0"+
    "\1\7\7\0\1\7\2\0\1\67\6\0\2\7\6\0"+
    "\6\7\3\0\6\7\1\u0101\21\7\3\0\1\7\7\0"+
    "\1\7\2\0\1\67\6\0\2\7\6\0\6\7\3\0"+
    "\7\7\1\u0102\20\7\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12524];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\3\11\5\1\2\11\3\1\1\11"+
    "\6\1\3\11\20\1\1\11\1\1\1\11\1\1\1\0"+
    "\5\11\2\0\1\1\2\0\1\11\46\1\2\0\52\1"+
    "\1\11\1\0\53\1\1\0\3\1\1\0\1\1\1\11"+
    "\17\1\1\0\2\1\1\0\22\1\1\11\2\1\1\0"+
    "\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    LinkedList<Token> list = new LinkedList<>();

    private void newToken(TokenType tokenType) {
        list.add(new Token(tokenType, yytext()));
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public LinkedList<Token> yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return list;
            }  // fall though
            case 259: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <"+
                                                    yytext()+">");
            }
          // fall through
          case 61: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 62: break;
          case 3:
            { newToken(TokenType.LOGICAL);
            }
          // fall through
          case 63: break;
          case 4:
            { newToken(TokenType.IDENTIFIER);
            }
          // fall through
          case 64: break;
          case 5:
            { newToken(TokenType.ARITHMETIC);
            }
          // fall through
          case 65: break;
          case 6:
            { newToken(TokenType.BITWISE);
            }
          // fall through
          case 66: break;
          case 7:
            { newToken(TokenType.L_PAREN);
            }
          // fall through
          case 67: break;
          case 8:
            { newToken(TokenType.R_PAREN);
            }
          // fall through
          case 68: break;
          case 9:
            { newToken(TokenType.COMMA);
            }
          // fall through
          case 69: break;
          case 10:
            { newToken(TokenType.DOT);
            }
          // fall through
          case 70: break;
          case 11:
            { newToken(TokenType.NUMBER);
            }
          // fall through
          case 71: break;
          case 12:
            { newToken(TokenType.COLON);
            }
          // fall through
          case 72: break;
          case 13:
            { newToken(TokenType.SEMICOLON);
            }
          // fall through
          case 73: break;
          case 14:
            { newToken(TokenType.COMPARISON);
            }
          // fall through
          case 74: break;
          case 15:
            { newToken(TokenType.ASSIGN);
            }
          // fall through
          case 75: break;
          case 16:
            { newToken(TokenType.QUESTION);
            }
          // fall through
          case 76: break;
          case 17:
            { newToken(TokenType.L_BRACKET);
            }
          // fall through
          case 77: break;
          case 18:
            { newToken(TokenType.R_BRACKET);
            }
          // fall through
          case 78: break;
          case 19:
            { newToken(TokenType.L_FIGURE);
            }
          // fall through
          case 79: break;
          case 20:
            { newToken(TokenType.R_FIGURE);
            }
          // fall through
          case 80: break;
          case 21:
            { newToken(TokenType.STRING);
            }
          // fall through
          case 81: break;
          case 22:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { newToken(TokenType.FUNCTION);
            }
          // fall through
          case 82: break;
          case 23:
            { newToken(TokenType.RETURN_TYPE);
            }
          // fall through
          case 83: break;
          case 24:
            { newToken(TokenType.AS);
            }
          // fall through
          case 84: break;
          case 25:
            { newToken(TokenType.AT);
            }
          // fall through
          case 85: break;
          case 26:
            { newToken(TokenType.DO);
            }
          // fall through
          case 86: break;
          case 27:
            { newToken(TokenType.IF);
            }
          // fall through
          case 87: break;
          case 28:
            { newToken(TokenType.IN);
            }
          // fall through
          case 88: break;
          case 29:
            { newToken(TokenType.RANGE);
            }
          // fall through
          case 89: break;
          case 30:
            { newToken(TokenType.DATA_TYPE);
            }
          // fall through
          case 90: break;
          case 31:
            { newToken(TokenType.FOR);
            }
          // fall through
          case 91: break;
          case 32:
            { newToken(TokenType.LET);
            }
          // fall through
          case 92: break;
          case 33:
            { newToken(TokenType.TRY);
            }
          // fall through
          case 93: break;
          case 34:
            { newToken(TokenType.VAR);
            }
          // fall through
          case 94: break;
          case 35:
            { newToken(TokenType.CASE);
            }
          // fall through
          case 95: break;
          case 36:
            { newToken(TokenType.ELSE);
            }
          // fall through
          case 96: break;
          case 37:
            { newToken(TokenType.DEFAULT);
            }
          // fall through
          case 97: break;
          case 38:
            { newToken(TokenType.FROM);
            }
          // fall through
          case 98: break;
          case 39:
            { newToken(TokenType.ACCESS_MODIFIER);
            }
          // fall through
          case 99: break;
          case 40:
            { newToken(TokenType.BOOL) ;
            }
          // fall through
          case 100: break;
          case 41:
            { newToken(TokenType.BREAK);
            }
          // fall through
          case 101: break;
          case 42:
            { newToken(TokenType.CATCH);
            }
          // fall through
          case 102: break;
          case 43:
            { newToken(TokenType.INIT);
            }
          // fall through
          case 103: break;
          case 44:
            { newToken(TokenType.WHERE);
            }
          // fall through
          case 104: break;
          case 45:
            { newToken(TokenType.WHILE);
            }
          // fall through
          case 105: break;
          case 46:
            { newToken(TokenType.DEINIT);
            }
          // fall through
          case 106: break;
          case 47:
            { newToken(TokenType.FUNC);
            }
          // fall through
          case 107: break;
          case 48:
            { newToken(TokenType.REPEAT);
            }
          // fall through
          case 108: break;
          case 49:
            { newToken(TokenType.RETURN);
            }
          // fall through
          case 109: break;
          case 50:
            { newToken(TokenType.STATIC);
            }
          // fall through
          case 110: break;
          case 51:
            { newToken(TokenType.STRUCT);
            }
          // fall through
          case 111: break;
          case 52:
            { newToken(TokenType.SWITCH);
            }
          // fall through
          case 112: break;
          case 53:
            { newToken(TokenType.CLASS);
            }
          // fall through
          case 113: break;
          case 54:
            { newToken(TokenType.ELIF);
            }
          // fall through
          case 114: break;
          case 55:
            { newToken(TokenType.IMPORT);
            }
          // fall through
          case 115: break;
          case 56:
            { newToken(TokenType.PROTOCOL);
            }
          // fall through
          case 116: break;
          case 57:
            { newToken(TokenType.EXTENSION);
            }
          // fall through
          case 117: break;
          case 58:
            { newToken(TokenType.SUBSCRIPT);
            }
          // fall through
          case 118: break;
          case 59:
            { newToken(TokenType.TYPEALIAS);
            }
          // fall through
          case 119: break;
          case 60:
            { newToken(TokenType.FALLTHROUGH);
            }
          // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
